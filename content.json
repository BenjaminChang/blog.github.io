{"meta":{"title":"westbreeze个人博客","subtitle":"兰亭无绪，独饮清风","description":null,"author":"westbreeze","url":"http://westbreeze.cn"},"pages":[{"title":"关于我","date":"2017-08-28T15:08:06.000Z","updated":"2017-08-28T15:11:34.310Z","comments":true,"path":"about/index.html","permalink":"http://westbreeze.cn/about/index.html","excerpt":"","text":"​ 以前也在各种博客网上零星的写过一些博客。 ​ 近来想把平时做的笔记整理一下，因此创建一个博客，整理的过程也是一种回顾。 ​"}],"posts":[{"title":"多域名指向统一个nginx配置","slug":"多域名指向同一个nginx","date":"2017-04-01T10:45:36.000Z","updated":"2017-11-01T06:29:41.679Z","comments":true,"path":"2017/04/01/多域名指向同一个nginx/","link":"","permalink":"http://westbreeze.cn/2017/04/01/多域名指向同一个nginx/","excerpt":"","text":"多个域名指向同一个nginx配置 server { listen 80; server_name test1.test.com test2.test.com; #charset koi8-r; #access_log logs/host.access.log main; location ^~ /sdk/ { proxy_pass http://passport; proxy_redirect off ; proxy_set_header Host $host:80; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } } 这里遇到一个问题 最后一个域名后面加个空格会报错","categories":[{"name":"nginx","slug":"nginx","permalink":"http://westbreeze.cn/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://westbreeze.cn/tags/nginx/"}]},{"title":"spring-session redis集群","slug":"无标题Markdown(1)","date":"2016-09-26T17:10:58.000Z","updated":"2017-11-29T04:00:10.899Z","comments":true,"path":"2016/09/27/无标题Markdown(1)/","link":"","permalink":"http://westbreeze.cn/2016/09/27/无标题Markdown(1)/","excerpt":"","text":"近来在使用spring-data-session-redis做web项目session共享的时候碰到一个很奇怪的问题。 redis集群在配置的是三主三从 在使用内网ip没有问题 但是用外网ip连接redis的时候缺报如下错误1Caused by: java.lang.IllegalArgumentException: Node 10.240.47.23:7000 is unknown to cluster 想了很久也想不通 通过从读取配置文件起一步步f8跟踪找到如下代码 JedisClusterConnection类中123456789101112131415161718192021222324public List&lt;String&gt; getConfig(final String pattern) &#123; List mapResult = this.clusterCommandExecutor.executeCommandOnAllNodes(new JedisClusterConnection.JedisClusterCommandCallback() &#123; public List&lt;String&gt; doInCluster(Jedis client) &#123; return client.configGet(pattern); &#125; &#125;).getResults(); ArrayList result = new ArrayList(); Iterator var4 = mapResult.iterator(); while(var4.hasNext()) &#123; NodeResult entry = (NodeResult)var4.next(); String prefix = entry.getNode().asString(); int i = 0; Iterator var8 = ((List)entry.getValue()).iterator(); while(var8.hasNext()) &#123; String value = (String)var8.next(); result.add((i++ % 2 == 0?prefix + &quot;.&quot;:&quot;&quot;) + value); &#125; &#125; return result; &#125; 这段代码会去执行命令连接所有的节点 但是redis在配置主从的时候通过内网ip关联的Cluster 在连接主节点的时候会去找从节点 而本机却连不了内网的ip 因此报这个错误 google clusterCommandExecutor.executeCommandOnAllNodes 找到解决办法 在spring-redis.xml配置文件中添加如下内容： 1&lt;util:constant static-field=&quot;org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP&quot;/&gt; 其含义是让spring session不在管集群节点信息状况，只管存取就行了 在spring-redis.xml中添加util节点需要添加如下命名空间： 123xmlns:util=&quot;http://www.springframework.org/schema/util&quot;http://www.springframework.org/schema/utilhttp://www.springframework.org/schema/util/spring-util-2.0.xsd","categories":[{"name":"集群与负载","slug":"集群与负载","permalink":"http://westbreeze.cn/categories/集群与负载/"}],"tags":[{"name":"集群与负载","slug":"集群与负载","permalink":"http://westbreeze.cn/tags/集群与负载/"}]},{"title":"shiro整合CAS","slug":"shiro整合cas","date":"2016-03-21T03:39:32.000Z","updated":"2017-11-01T05:58:52.170Z","comments":true,"path":"2016/03/21/shiro整合cas/","link":"","permalink":"http://westbreeze.cn/2016/03/21/shiro整合cas/","excerpt":"","text":"shiro整合CAS 先说下思路，shiro整合cas，改造shiro原有的登录过程，从cas中获取用户名(不需要密码)，因为密码验证已经在cas中处理了，从cas中获取用户名，构造token，然后继续走shiro该走的流程。最重要的就是重写FormAuthenticationFilter 。第一步：加入jar包 并且在maven中加入shiro-cas核心包即 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-cas&lt;/artifactId&gt; &lt;version&gt;1.2.4&lt;/version&gt;&lt;/dependency&gt; 第二步： 配置application-shiro.xml文件配置过滤器，重写的shiro FormAuthenticationFilter 12&lt;bean id=&quot;authcFilter&quot; class=&quot;com.zcj.filter.CasAuthenticationFilter&quot;&gt; &lt;/bean&gt; 指定权限拦截为这个继承的fillter而不是FormAuthenticationFilter 12345&lt;property name=&quot;filters&quot;&gt; &lt;util:map&gt; &lt;entry key=&quot;authc&quot; value-ref=&quot;authcFilter&quot; /&gt; &lt;/util:map&gt;&lt;/property&gt; 最重要的一点，自定义realm中要定义不验证密码，因为cas做的是用户名密码验证，所以在shiro中不必做密码验证，如果这里不配置允许所有认证的话，会导致重定向死循环，因为登录成功之后验证密码肯定不对，因为密码是空的，就又会调到登录页面，而cas又登录过了，就直接又到shiro自定义realm中，又发现密码不对又回去 123456&lt;!-- 項目自定义的Realm --&gt;&lt;bean id=&quot;shiroDbRealm&quot; class=&quot;com.zcj.shiro.ShiroDbRealm&quot;&gt; &lt;property name=&quot;credentialsMatcher&quot;&gt; &lt;bean class=&quot;org.apache.shiro.authc.credential.AllowAllCredentialsMatcher&quot;&gt;&lt;/bean&gt; &lt;/property&gt; &lt;/bean&gt; 第三步：重写shiro 的FormAuthenticationFilter 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.zcj.filter;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.subject.Subject;import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;import org.apache.shiro.web.util.WebUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * CmsAuthenticationFilter自定义登录认证filter */public class CasAuthenticationFilter extends FormAuthenticationFilter &#123; private Logger logger = LoggerFactory.getLogger(CasAuthenticationFilter.class); public boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception &#123; boolean isAllowed = isAccessAllowed(request, response, mappedValue); //登录跳转 if (isAllowed &amp;&amp; isLoginRequest(request, response)) &#123; try &#123; issueSuccessRedirect(request, response); &#125; catch (Exception e) &#123; logger.error(&quot;&quot;, e); &#125; return false; &#125; HttpServletRequest req= (HttpServletRequest) request; String name=req.getRemoteUser(); System.out.println(name); if(StringUtils.isNotBlank(req.getRemoteUser()))&#123; AuthenticationToken token = createToken(req.getRemoteUser(),null,request, response); Subject subject = getSubject(request, response); try &#123; subject.login(token); &#125; catch (Exception e) &#123; WebUtils.getAndClearSavedRequest(request); WebUtils.issueRedirect(request, response, &quot;/403.html&quot;, null,true); e.printStackTrace(); return false; &#125; &#125; return isAllowed || onAccessDenied(request, response, mappedValue); &#125;&#125;","categories":[{"name":"单点登录","slug":"单点登录","permalink":"http://westbreeze.cn/categories/单点登录/"}],"tags":[{"name":"shiro-cas","slug":"shiro-cas","permalink":"http://westbreeze.cn/tags/shiro-cas/"}]},{"title":"有道云markdown","slug":"有道云markdown","date":"2015-09-27T10:56:32.000Z","updated":"2017-11-29T03:59:30.429Z","comments":true,"path":"2015/09/27/有道云markdown/","link":"","permalink":"http://westbreeze.cn/2015/09/27/有道云markdown/","excerpt":"","text":"使用有道云写markdown​ 1欢迎来到有道云笔记 ——免费，可在桌面版、网页版、手机版之间同步的笔记软件开始使用有道云笔记，只需四步： 1● 点击软件左上角的“新建笔记”按钮； 1● 在新笔记中输入内容，插入图片，有道云笔记还能帮您管理Word, Excel, PPT，PDF等多种附件； 1● 无需手动保存，有道云笔记及时为您自动同步； 1● 通过搜索轻松定位目标笔记。 有道云笔记能帮您：​​ 1● 分类整理笔记，高效管理个人知识。快速搜索，安全备份； 12345678● 自动同步文件，支持图片及文档类附件。无限增长的大存储空间，轻松实现多地点办公；● 用手机版随时随地记录一切趣事和想法，并自动与电脑双向同步；● 一键保存网页中精彩图文，本地存储，永久珍藏有价值的信息。● 微信文章及对话一键保存，扫一扫右边的二维码关注有道云笔记微信公众号吧！● 微博收藏内容一键导入有道云笔记，永久保存。微博首页收藏页面即可找到一键导入有道云笔记。 一键保存网页，点击尝试网页剪报功能点击尝试网页版，手机版等更多版本 微信文章及对话，一键保存。点击查看保存方法。","categories":[],"tags":[]},{"title":"linux开启SMB服务","slug":"linux开启smb服务","date":"2015-09-01T15:49:31.000Z","updated":"2017-11-29T08:45:03.386Z","comments":true,"path":"2015/09/01/linux开启smb服务/","link":"","permalink":"http://westbreeze.cn/2015/09/01/linux开启smb服务/","excerpt":"","text":"linux开启smb服务 组成Samba运行的有两个服务，一个是SMB，另一个是NMB； SMB是Samba 的核心启动服务，主要负责建立 Linux Samba服务器与Samba客户机之间的对话，验证用户身份并提供对文件和打印系统的访问，只有SMB服务启动，才能实现文件的共享，监听139 TCP端口； 而NMB服务是负责解析用的，类似与DNS实现的功能，NMB可以把Linux系统共享的工作组名称与其IP对应起来，如果NMB服务没有启动，就只能通过IP来访问共享文件，监听137和138 UDP端口。 配置这些东西你需要先拥有root权限。首先关闭防火墙：service iptables stop,当初我就因为忽略这个花了一定的时间。另外关闭SELINUX的强制模式：setenforce 0，这个也不可忽略，如果setenforce 1，就好多共享都不成功了。安装Samba: yum install samba samba-client samba-swat 安装过程这里就不贴图了。 查看安装情况： rmp -qa|grep samba Samba服务器安装完毕，会生成配置文件目录/etc/samba和其它一些samba可执行命令工具，/etc/samba/smb.conf是samba的核心配置文件，/etc/init.d/smb是samba的启动/关闭文件。 下面我们来配置Samba服务，有一些注意事项我会强调，请大家注意： 先定位到/etc/samba目录下，把smb.conf备份一下： cp smb.conf smb.conf.bak现在我要把/share目录共享给我的win7机器，打开samba配置文件， vi /etc/samba/smb.conf用shift+g定位到最后一行,可以看到： 修改如下： 好了，保存退出:wq!。 启动smb服务 service smb start 停止 service smb stop 重新启动service smb restart 添加smb用户分析及解决办法：samba用户没有创建或激活，可通过以下方法解决： 添加用户：useradd 你的用户 把用户添加到samba中：smbpasswd -a 你的用户 激活用户：smbpasswd -e 你的用户。","categories":[{"name":"linux","slug":"linux","permalink":"http://westbreeze.cn/categories/linux/"}],"tags":[{"name":"SMB","slug":"SMB","permalink":"http://westbreeze.cn/tags/SMB/"}]},{"title":"写在前面","slug":"写在前面","date":"2015-08-25T17:10:58.000Z","updated":"2017-11-29T03:59:49.953Z","comments":true,"path":"2015/08/26/写在前面/","link":"","permalink":"http://westbreeze.cn/2015/08/26/写在前面/","excerpt":"","text":"​ 以前也在各种博客网上零星的写过一些博客。 ​ 近来想把平时做的笔记整理一下，因此创建一个博客，整理的过程也是一种回顾。 ​","categories":[{"name":"博客说明","slug":"博客说明","permalink":"http://westbreeze.cn/categories/博客说明/"}],"tags":[{"name":"westbreeze","slug":"westbreeze","permalink":"http://westbreeze.cn/tags/westbreeze/"}]},{"title":"MySql命令大全","slug":"mysql文档","date":"2015-08-22T11:03:01.000Z","updated":"2017-11-29T06:56:00.078Z","comments":true,"path":"2015/08/22/mysql文档/","link":"","permalink":"http://westbreeze.cn/2015/08/22/mysql文档/","excerpt":"","text":"1、连接Mysql格式： mysql -h主机地址 -u用户名 －p用户密码 1、连接到本机上的MYSQL。首先打开DOS窗口，然后进入目录mysql\\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。 如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt; 2、连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令： mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样） 3、退出MYSQL命令： exit （回车） 2、修改密码格式：mysqladmin -u用户名 -p旧密码 password 新密码 1、给root加个密码ab12。首先在DOS下进入目录mysql\\bin，然后键入以下命令 mysqladmin -u root -password ab12注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。 2、再将root的密码改为djg345。 mysqladmin -u root -p ab12 password djg345 3、增加新用户注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符 格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码” 1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：123456 grant select,insert,update,delete on *.* to [email=test1@”%]test1@”%[/email]” Identified by “abc”;``` 但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。 grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “abc”; 12如果你不想test2有密码，可以再打一个命令将密码消掉。 grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “”; 12345678910 #### 4.1 创建数据库注意：创建数据库之前要先连接Mysql服务器命令：create database &lt;数据库名&gt;例1：建立一个名为xhkdb的数据库 mysql&gt; create database xhkdb;例2：创建数据库并分配用户 ①CREATE DATABASE 数据库名; ②GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 数据库名.* TO 数据库名@localhost IDENTIFIED BY ‘密码’; ③SET PASSWORD FOR ‘数据库名’@’localhost’ = OLD_PASSWORD(‘密码’);123456789101112依次执行3个命令完成数据库创建。注意：中文 “密码”和“数据库”是户自己需要设置的。#### 4.2 显示数据库命令：show databases （注意：最后有个s）mysql&gt; show databases;注意：为了不再显示的时候乱码，要修改数据库默认编码。以下以GBK编码页面为例进行说明：1、修改MYSQL的配置文件：my.ini里面修改default-character-set=gbk2、代码运行时修改： ①Java代码：jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk ②PHP代码：header(“Content-Type:text/html;charset=gb2312”); ③C语言代码：int mysql_set_character_set( MYSQL mysql, char csname)；12345678910该 函数用于为当前连接设置默认的字符集。字符串csname指定了1个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与SET NAMES语句类似，但它还能设置mysql- &gt; charset的值，从而影响了由mysql_real_escape_string() 设置的字符集。#### 4.3 删除数据库命令：drop database &lt;数据库名&gt;例如：删除名为 xhkdb的数据库mysql&gt; drop database xhkdb;例子1：删除一个已经确定存在的数据库 mysql&gt; drop database drop_database; Query OK, 0 rows affected (0.00 sec) 例子2：删除一个不确定存在的数据库 mysql&gt; drop database drop_database; ERROR 1008 (HY000): Can’t drop database ‘drop_database’; database doesn’t exist //发生错误，不能删除’drop_database’数据库，该数据库不存在。 mysql&gt; drop database if exists drop_database; Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在 mysql&gt; create database drop_database; Query OK, 1 row affected (0.00 sec) mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误 Query OK, 0 rows affected (0.00 sec)1234567891011#### 4.4 连接数据库命令： use &lt;数据库名&gt;例如：如果xhkdb数据库存在，尝试存取它： mysql&gt; use xhkdb;屏幕提示：Database changeduse 语句可以通告MySQL把db_name数据库作为默认（当前）数据库使用，用于后续语句。该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的USE语句： mysql&gt; USE db1; mysql&gt; SELECT COUNT() FROM mytable; # selects from db1.mytable mysql&gt; USE db2; mysql&gt; SELECT COUNT() FROM mytable; # selects from db2.mytable12使用USE语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。下面的例子可以从db1数据库访问作者表，并从db2数据库访问编辑表： mysql&gt; USE db1; mysql&gt; SELECT author_name,editor_name FROM author,db2.editor -&gt; WHERE author.editor_id = db2.editor.editor_id;1234567891011121314USE语句被设立出来，用于与Sybase相兼容。有些网友问到，连接以后怎么退出。其实，不用退出来，use 数据库后，使用show databases就能查询所有数据库，如果想跳到其他数据库，用 use 其他数据库名字就可以了。#### 4.5 当前选择的数据库命令：mysql&gt; select database();MySQL中SELECT命令类似于其他编程语言里的print或者write，你可以用它来显示一个字符串、数字、数学表达式的结果等等。如何使用MySQL中SELECT命令的特殊功能？1.显示MYSQL的版本 mysql&gt; select version();+———————–+| version() |+———————–+| 6.0.4-alpha-community |+———————–+1 row in set (0.02 sec) 显示当前时间mysql&gt; select now();+———————+| now() |+———————+| 2009-09-15 22:35:32 |+———————+1 row in set (0.04 sec) 显示年月日SELECT DAYOFMONTH(CURRENT_DATE);+————————–+| DAYOFMONTH(CURRENT_DATE) |+————————–+| 15 |+————————–+1 row in set (0.01 sec) SELECT MONTH(CURRENT_DATE);+———————+| MONTH(CURRENT_DATE) |+———————+| 9 |+———————+1 row in set (0.00 sec) SELECT YEAR(CURRENT_DATE);+——————–+| YEAR(CURRENT_DATE) |+——————–+| 2009 |+——————–+1 row in set (0.00 sec) 显示字符串mysql&gt; SELECT “welecome to my blog!”;+———————-+| welecome to my blog! |+———————-+| welecome to my blog! |+———————-+1 row in set (0.00 sec) 当计算器用select ((4 4) / 10 ) + 25;+———————-+| ((4 4) / 10 ) + 25 |+———————-+| 26.60 |+———————-+1 row in set (0.00 sec) 126. 串接字符串 select CONCAT(f_name, “ “, l_name)AS Namefrom employee_datawhere title = ‘Marketing Executive’;+—————+| Name |+—————+| Monica Sehgal || Hal Simlai || Joseph Irvine |+—————+3 rows in set (0.00 sec)123456注意：这里用到CONCAT()函数，用来把字符串串接起来。另外，我们还用到以前学到的AS给结果列&apos;CONCAT(f_name, &quot; &quot;, l_name)&apos;起了个假名。5.1 创建数据表命令：create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);例如，建立一个名为MyClass的表， 字段名 数字类型 数据宽度 是否为空 是否主键 自动增加 默认值id int 4 否 primary key auto_incrementname char 20 否sex int 4 否 0degree double 16 是 mysql&gt; create table MyClass( id int(4) not null primary key auto_increment,name char(20) not null,sex int(4) not null default ‘0’,degree double(16,2));123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#### 5.3 删除数据表命令：drop table &lt;表名&gt;例如：删除表名为 MyClass 的表 mysql&gt; drop table MyClass;DROP TABLE用于取消一个或多个表。您必须有每个表的DROP权限。所有的表数据和表定义会被取消，所以使用本语句要小心！注意：对于一个带分区的表，DROP TABLE会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。DROP TABLE还会取消与被取消的表有关联的分区定义（.par）文件。对与不存在的表，使用IF EXISTS用于防止错误发生。当使用IF EXISTS时，对于每个不存在的表，会生成一个NOTE。RESTRICT和CASCADE可以使分区更容易。目前，RESTRICT和CASCADE不起作用。#### 5.4 表插入数据命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]例如：往表 MyClass中插入二条记录, 这二条记录表示：编号为1的名为Tom的成绩为96.45, 编号为2 的名为Joan 的成绩为82.99， 编号为3 的名为Wang 的成绩为96.5。 mysql&gt; insert into MyClass values(1,&apos;Tom&apos;,96.45),(2,&apos;Joan&apos;,82.99), (2,&apos;Wang&apos;, 96.59);注意：insert into每次只能向表中插入一条记录。5.5 查询表中的数据1)、查询所有行命令： select &lt;字段1，字段2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;例如：查看表 MyClass 中所有数据 mysql&gt; select * from MyClass;2）、查询前几行数据例如：查看表 MyClass 中前2行数据mysql&gt; select * from MyClass order by id limit 0,2;select一般配合where使用，以查询更精确更复杂的数据。#### 5.6 删除表中数据 命令：delete from 表名 where 表达式例如：删除表 MyClass中编号为1 的记录mysql&gt; delete from MyClass where id=1;下面是一个删除数据前后表的对比。FirstName LastName AgePeter Griffin 35Glenn Quagmire 33 #### 5.8 增加字段 命令：alter table 表名 add字段 类型 其他;例如：在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为0 mysql&gt; alter table MyClass add passtest int(4) default ‘0’ 加索引 mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);例子： mysql&gt; alter table employee add index emp_name (name); 加主关键字的索引 mysql&gt; alter table 表名 add primary key (字段名);例子： mysql&gt; alter table employee add primary key(id); 加唯一限制条件的索引 mysql&gt; alter table 表名 add unique 索引名 (字段名);例子： mysql&gt; alter table employee add unique emp_name2(cardnumber); 删除某个索引 mysql&gt; alter table 表名 drop index 索引名;例子： mysql&gt;alter table employee drop index emp_name; 增加字段：mysql&gt; ALTER TABLE table_name ADD field_name field_type; 修改原字段名称及类型：mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type; 删除字段：MySQL ALTER TABLE table_name DROP field_name;5.9 修改表名命令：rename table 原表名 to 新表名; 例如：在表MyClass名字更改为YouClass mysql&gt; rename table MyClass to YouClass; 当你执行 RENAME 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 ALTER 和 DROP 权限，以及对新表的 CREATE 和 INSERT 权限。 如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事物退回到最初状态。 RENAME TABLE 在 MySQL 3.23.23 中被加入。6、备份数据库命令在DOS的[url=file://\\mysql\\bin]\\mysql\\bin[/url]目录下执行 1.导出整个数据库导出文件默认是存在mysql\\bin目录下 mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名 mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql 2.导出一个表 mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名 mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql 3.导出一个数据库结构 mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql -d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table 4.带语言参数导出 mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql 例如，将aaa库备份到文件back_aaa中： [root@test1 root]# cd /home/data/mysql [root@test1 mysql]# mysqldump -u root -p –opt aaa &gt; back_aaa7.1 一个建库和建表的实例1drop database if exists school; //如果存在SCHOOL则删除create database school; //建立库SCHOOLuse school; //打开库SCHOOLcreate table teacher //建立表TEACHER( id int(3) auto_increment not null primary key, name char(10) not null, address varchar(50) default ‘深圳’, year date); //建表结束 //以下为插入字段insert into teacher values(”,’allen’,’大连一中’,’1976-10-10′);insert into teacher values(”,’jack’,’大连二中’,’1975-12-23′); 如果你在mysql提示符键入上面的命令也可以，但不方便调试。1、你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\\下，并在DOS状态进入目录[url=file://\\mysql\\bin]\\mysql\\bin[/url]，然后键入以下命令： mysql -uroot -p密码 &lt; c:\\school.sql如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。 2、或者进入命令行后使用 mysql&gt; source c:\\school.sql; 也可以将school.sql文件导入数据库中。 7.2 一个建库和建表的实例2drop database if exists school; //如果存在SCHOOL则删除create database school; //建立库SCHOOLuse school; //打开库SCHOOLcreate table teacher //建立表TEACHER( id int(3) auto_increment not null primary key, name char(10) not null, address varchar(50) default ‘’深圳’’, year date); //建表结束 //以下为插入字段insert into teacher values(‘’’’,’’glchengang’’,’’深圳一中’’,’’1976-10-10’’);insert into teacher values(‘’’’,’’jack’’,’’深圳一中’’,’’1975-12-23’’); 注：在建表中1、将ID设为长度为3的数字字段:int(3)；并让它每个记录自动加一:auto_increment；并不能为空:not null；而且让他成为主字段primary key。 2、将NAME设为长度为10的字符字段 3、将ADDRESS设为长度50的字符字段，而且缺省值为深圳。 4、将YEAR设为日期字段。``` 转载来源： http://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html","categories":[{"name":"常用文档","slug":"常用文档","permalink":"http://westbreeze.cn/categories/常用文档/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://westbreeze.cn/tags/Mysql/"}]}]}